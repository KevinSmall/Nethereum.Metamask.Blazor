@page "/"
@inject IJSRuntime jsRuntime;
@inject MetamaskService metamaskService;
@inject MetamaskInterceptor metamaskInterceptor;
@inherits IndexBase
@using Microsoft.AspNetCore
@using Commerce.Metamask.Blazor.Server.Components
@using Commerce.Metamask.Blazor.Server.Services
@using Microsoft.AspNetCore.Components

<div class="form-group">
    <div class="form-row align-items-center">
        <div class="col-auto my-1">
            <label for="poNumberInput">Purchase Order Number</label>
        </div>
        <div class="col-sm-6 my-1">
            <input type="text" class="form-control" id="poNumberInput" aria-describedby="poNumberInputHelp" placeholder="Enter Purchase Order number" @bind="@BuyerPoNumber" />
        </div>
        <div class="col-auto my-1">
            <button class="btn btn-primary" type="button" @onclick="@GeneratePoNumber">
                Generate
            </button>
        </div>
    </div>
    <p>@AdditionalMessage</p>
</div>

<div class="card">
    <div class="card-header">
        <div class="btn-group btn-group-toggle" data-toggle="buttons">
            <button type="button" class="btn @GetActive(0)" @onclick="@(() => Select(0))">Display</button>
            <button type="button" class="btn @GetActive(1)" @onclick="@(() => Select(1))">Display Events</button>
            <button type="button" class="btn @GetActive(2)" @onclick="@(() => Select(2))">Create</button>
            <button type="button" class="btn @GetActive(3)" @onclick="@(() => Select(3))">Cancel</button>
            <button type="button" class="btn @GetActive(4)" @onclick="@(() => Select(4))">Settings</button>
        </div>
    </div>
    <div class="card-body">
        @if (ActiveTab == 0)
        {
            <!-- Display PO -->
            <Display BuyerPoNumber="@BuyerPoNumber">
            </Display>
        }
        else if (ActiveTab == 1)
        {
            <!-- Display PO Events -->
            <DisplayEvents BuyerPoNumber="@BuyerPoNumber">
            </DisplayEvents>
        }
        else if (ActiveTab == 2)
        {
            <!-- Create PO -->
            <Create BuyerPoNumber="@BuyerPoNumber">
            </Create>
        }
        else if (ActiveTab == 3)
        {
            <!-- Cancel PO -->
            <Cancel BuyerPoNumber="@BuyerPoNumber">
            </Cancel>
        }
        else if (ActiveTab == 4)
        {
            <div class="card bg-light mb-3">
                <div class="card-header">Metamask Settings</div>
                <div class="card-body text-dark">
                    @if (MetamaskAvailable)
                    {
                        <p class="card-text">Metamask: <span class="badge badge-success">Available</span></p>
                    }
                    else
                    {
                        <p class="card-text">Metamask: <span class="badge badge-danger">Not Available</span></p>
                    }
                    @if (EthereumEnabled)
                    {
                        <p class="card-text">Ethereum: <span class="badge badge-success">Enabled</span></p>
                    }
                    else
                    {
                        <p class="card-text">Ethereum: <span class="badge badge-danger">Not enabled</span></p>
                    }
                    <button @onclick="@EnableEthereumAsync">Enable Ethereum</button>
                    <br />
                    <br />
                    <div class="form-group">
                        <label for="selectedAccountMetamask">Selected Account</label>
                        <input type="text" class="form-control" readonly id="selectedAccountMetamask" aria-describedby="selectedAccountMetamaskHelp" placeholder="Enable Ethereum to select an account from MetaMask" @bind="@SelectedAccount" />
                        <small id="selectedAccountMetamaskHelp" class="form-text text-muted">This account should be the Buyer Wallet contract owner and needs Ether to pay for any transactions made. The account is selected within MetaMask.</small>
                    </div>
                </div>
            </div>

            <!-- Settings -->
            <div class="card bg-light mb-3">
                <div class="card-header">Buyer Wallet</div>
                <div class="card-body text-dark">

                    <div class="form-group">
                        <label for="url">Blockchain Name</label>
                        <input type="text" class="form-control" readonly id="blockchainName" aria-describedby="blockchainNameHelp" placeholder="None" @bind="@WalletBuyer.Lib.Wallet.Info.BlockchainName" /> 
                        <small id="blockchainNameHelp" class="form-text text-muted">Name of blockchain currently connected to</small>
                    </div>

                    <div class="form-group">
                        <label for="walletBuyerAddressInput">Buyer Wallet Address</label>
                        <input type="text" class="form-control" readonly id="walletBuyerAddressInput" aria-describedby="walletBuyerAddressHelp" placeholder="Enter the buyer wallet address" @bind="@WalletBuyer.Lib.Wallet.Info.WalletBuyerAddress" />
                        <small id="walletBuyerAddressHelp" class="form-text text-muted">Contract address of the buyer wallet</small>
                    </div>

                    <div class="form-group">
                        <label for="walletBuyerSystemId">Buyer System Id</label>
                        <input type="text" class="form-control" readonly id="walletBuyerSystemId" aria-describedby="walletBuyerSystemIdHelp" placeholder="None" @bind="@WalletBuyer.Lib.Wallet.Info.BuyerSysDesc" />
                        <small id="walletBuyerSystemIdHelp" class="form-text text-muted">System id description of the buyer wallet</small>
                    </div>

                </div>
            </div>
        }
    </div>
</div>

@code{
    int ActiveTab = 0;
    protected void Select(int tab)
    {
        ActiveTab = tab;
    }

    protected string GetActive(int tab)
    {
        if (ActiveTab == tab) return "btn-primary";
        return "btn-light";
    }
}

@code{
    bool MetamaskAvailable { get; set; }
    bool EthereumEnabled { get; set; }
    string SelectedAccount { get; set; }
    string BlockHash { get; set; }
    string TransactionHash { get; set; }
    string ErrorTransferMessage { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstTime)
    {
        MetamaskAvailable = await metamaskService.CheckMetamaskAvailability();
        await base.OnAfterRenderAsync(firstTime);
    }

    protected async Task EnableEthereumAsync()
    {
        EthereumEnabled = await metamaskService.EnableEthereumAsync();
        if (EthereumEnabled)
        {
            SelectedAccount = await metamaskService.GetSelectedAccount();
        }
    }
}
